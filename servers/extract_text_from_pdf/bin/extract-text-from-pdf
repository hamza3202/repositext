#!/usr/bin/env ruby

=begin

This is a simple server process which extracts the plain text contents of
a PDF file at path_to_pdf.

Send it a command on a TCP socket at `port`:

    "EXTRACT_TEXT /path/to/file.pdf"

and it will return the plain text as string on the same connection, followed by EOF.

Send "TERMINATE" to kill this server process.

Send "PING" to test if the server is listening.

OPTIMIZE: Currently we establish a new connection for every PDF file, and we
don't have advanced concurrency. Let's see how well this works.

Call like so:

    ./bin/extract-text-from-pdf --port 1206

=end

require 'java'
require 'json'
require 'socket'
require 'pdfbox_text_extraction'

if ARGV[0] != '--port' || (port = ARGV[1]).nil?
  raise "Required argument --port not given"
end

# JRuby uses Java's socket implementation, and it's different from MRI's

socket = ServerSocket.new(Socket::AF_INET, Socket::SOCK_STREAM, 0)
sockaddr = ServerSocket.pack_sockaddr_in(port.to_i, "127.0.0.1")
socket.bind(sockaddr, 5)
# no call to listen...
# socket.listen(5)

loop {
  readable, _, _ = IO.select([socket])
  readable.each { |r|
    begin
      connection, addr = r.accept_nonblock
    rescue IO::WaitReadable
      next
    end

    request = connection.read

    # Process the request
    case
    when 'PING' == request
      connection.write('PONG')
    when 'TERMINATE' == request
      exit
    when request.index('"command":"EXTRACT_TEXT"')
      request_attrs = JSON.parse(request, symbolize_names: true)
      # {
      #   command: "EXTRACT_TEXT",
      #   path_to_pdf: "/path/to/pdf",
      #   pdfbox_text_extraction_options: {
      #     spacing_tolerance: 0.3, # Set the space width-based tolerance value that is used to estimate where spaces in text should be added.
      #   },
      # }
      path_to_pdf = request_attrs[:path_to_pdf]
      pdfbox_text_extraction_options = request_attrs[:pdfbox_text_extraction_options]

      # set crop area depending on pdf variant
      pdf_file_basename = path_to_pdf.split('/').last
      crop_area_attrs = case pdf_file_basename
      when /^eng.*\.book-bound\.pdf$/,
           /^eng.*\.web-bound\.pdf$/
        # English bound book/web
        # TODO: Update English bound foreign bound once page settings are updated.
        {
          crop_x: 0, # crop area top left corner x-coordinate
          crop_y: 0.7, # crop area top left corner y-coordinate
          crop_width: 5.5, # crop area width
          crop_height: 7.26, # crop area height
        }
      when /^eng.*\.book-stitched\.pdf$/,
           /^eng.*\.web-stitched\.pdf$/
        # English stitched book/web
        {
          crop_x: 0, # crop area top left corner x-coordinate
          crop_y: 0.7, # crop area top left corner y-coordinate
          crop_width: 5.5, # crop area width
          crop_height: 7.26, # crop area height
        }
      when /\.book-bound\.pdf$/,
           /\.web-bound\.pdf$/
        # Foreign bound book/web
        {
          crop_x: 0, # crop area top left corner x-coordinate
          crop_y: 1.0, # crop area top left corner y-coordinate
          crop_width: 5.5, # crop area width
          crop_height: 6.6, # crop area height
        }
      when /\.book-stitched\.pdf$/,
           /\.web-stitched\.pdf$/
        # Foreign stitched book/web
        {
          crop_x: 0, # crop area top left corner x-coordinate
          crop_y: 0.7, # crop area top left corner y-coordinate
          crop_width: 5.5, # crop area width
          crop_height: 7.26, # crop area height
        }
      when /-bound\.pdf$/
        # Enlarged bound
        {
          crop_x: 0, # crop area top left corner x-coordinate
          crop_y: 1.0, # crop area top left corner y-coordinate
          crop_width: 8.5, # crop area width
          crop_height: 9.4, # crop area height
        }
      when /-stitched\.pdf$/
        # Enlarged stitched
        {
          crop_x: 0, # crop area top left corner x-coordinate
          crop_y: 1.0, # crop area top left corner y-coordinate
          crop_width: 8.5, # crop area width
          crop_height: 9.4, # crop area height
        }
      else
        raise "Handle this: #{ pdf_file_basename.inspect }"
        connection.write("Handle this: #{ pdf_file_basename.inspect }")
      end

      r = PdfboxTextExtraction.run(
        path_to_pdf,
        crop_area_attrs.merge(pdfbox_text_extraction_options)
      )

      connection.write(r)
    else
      connection.write("Unhandled request: #{ request.inspect }")
    end

    # Close this connection (sending EOF).
    connection.close
  }
}

# =======================================================

# This is what we'd do in MRI

# # Establish a server listening on port
# ServerSocket.tcp_server_loop(port.to_i) do |connection|

#   # Get the client's request
#   request = connection.read
#   command, path_to_pdf = request.split

#   # Process the request
#   case command
#   when 'EXTRACT_TEXT'
#     connection.write(PdfboxTextExtraction.run(path_to_pdf))
#   when 'TERMINATE'
#     exit
#   else
#     connection.write("Unhandled request: #{ request.inspect }")
#   end

#   # Close this connection (sending EOF).
#   connection.close
# end
